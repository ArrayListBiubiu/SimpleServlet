<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"

       xsi:schemaLocation="

		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

<!--day01-->
<!--通过spring获取对象。-->
    <!--1.类中存在无参数的构造的方法。-->
    <bean id="dog" class="spring01.Dog">
    </bean>
    <!--2.类中存在静态工厂方法。-->
    <bean id="cat" class="spring01.Cat" factory-method="getCat">
    </bean>
    <!--3.类中存在实例工厂方法。
            注：实例工厂方法：需要另一个类中存在工厂方法，可以创建它的对象。-->
    <bean id="fishFactory" class="spring01.FishFactory">
    </bean>
    <bean id="fish" class="spring01.Fish" factory-method="getFish" factory-bean="fishFactory">
    </bean>


<!--day02-->
    <!--注入值的方式一：通过set方法注入属性值，常用。-->
    <bean id="userDao" class="spring02.UserDao">
        <property name="username" value="root">
        </property>
    </bean>
    <bean id="userService" class="spring02.UserService">
        <property name="userDao" ref="userDao"></property>
    </bean>
    <!--注入值的方式二：通过构造方法注入属性值，不常用。-->
    <bean id="lion" class="spring02.Lion">
        <constructor-arg index="0" value="BeiJing">
        </constructor-arg>
        <constructor-arg index="1" value="male">
        </constructor-arg>
    </bean>
    <!--注入集合类型的值。-->
    <bean id="owl" class="spring02.Owl">
        <property name="names">
            <list>
                <value>猫头鹰1号</value>
                <value>猫头鹰2号</value>
                <value>猫头鹰3号</value>
            </list>
        </property>
        <property name="cities">
            <set>
                <value>北京</value>
                <value>上海</value>
                <value>深圳</value>
            </set>
        </property>
        <property name="home">
            <map>
                <entry key="father" value="爸爸">
                </entry>
                <entry key="mother" value="妈妈">
                </entry>
            </map>
        </property>

        <!--properties类型
        <property name="dbConfig">
            <props>
                <prop key="username">root</prop>
                <prop key="password">root</prop>
            </props>
        </property>-->
        <property name="dbConfig" ref="config"></property>
    </bean>
    <!--工具节点。-->
    <util:properties id="config" location="classpath:db.properties"></util:properties>



<!--day03-->
    <!--注入值的方式三：通过spring表达式注入。-->
    <bean id="fox" class="spring03.Fox">
        <property name="name" value="#{userDao.username}">
        </property>
        <property name="city" value="#{owl.cities[1]}">
        </property>
        <property name="home" value="#{owl.home.father}"><!--也可以写成value="#{owl.home['father']}"-->
        </property>
    </bean>
    <!--spring注解-->
    <!--组建扫描，base-package是根包。
            注：1.如果没有显示的指定bean-id，默认使用类名且首字母小写。
                2.也可以通过注解指定bean-id，Component("eagleee")。-->
    <context:component-scan base-package="spring03"></context:component-scan>

<!--day04-->
    <!--springmvc-->
    <context:component-scan base-package="springmvc01"></context:component-scan>
    <!--ViewResolver-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
            <property name="prefix" value="/WEB-INF/springmvc-day01/">
            </property>
            <property name="suffix" value=".jsp">
            </property>
    </bean>

<!--day05-->
    <!--springmvc-->
    <!--拦截器链-->
    <mvc:interceptors>
        <!--第1个拦截器。
                注：可配置多个拦截器，先配置的拦截器优先执行。-->
        <mvc:interceptor>
            <!--1.需要拦截的路径，即黑名单。-->
            <mvc:mapping path="/*"/>
            <!--<mvc:mapping path="/index.do"/>，即拦截的路径可以写多个。-->
            <!--2.不需要拦截的路径，即白名单。-->
            <mvc:exclude-mapping path="/reg.do"/>
            <mvc:exclude-mapping path="/handle_reg.do"/>
            <mvc:exclude-mapping path="/login.do"/>
            <mvc:exclude-mapping path="/handle_login.do"/>
            <!--3.拦截器类。
                    注：***1,2,3顺序不允许颠倒。***-->
            <bean class="springmvc02.LoginInterceptor"/>
        </mvc:interceptor>
        <!--第2个拦截器。-->
    </mvc:interceptors>


    <!--注解驱动-->
    <mvc:annotation-driven></mvc:annotation-driven>

</beans>